name: Deploy API Manager service and test the api

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  create-sp:
    runs-on: ubuntu-latest
    outputs:
      sp_appid: ${{ steps.create-sp.outputs.sp_appid }}
      sp_password: ${{ steps.create-sp.outputs.sp_password }}
      sp_tenant: ${{ steps.create-sp.outputs.sp_tenant }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Azure with Bootstrap Credentials
        uses: azure/login@v2
        with:
          creds: ${{ secrets.BOOTSTRAP_AZURE_CREDENTIALS }}

      - name: Create Service Principal
        id: create-sp
        run: |
          # Retrieve the current subscription ID
          subscriptionId=$(az account show --query id -o tsv)
          echo "Using subscription: $subscriptionId"
          
          # Create a new service principal with Contributor role
          sp=$(az ad sp create-for-rbac --name "myNewTerraformSP" --role "Contributor" --scopes "/subscriptions/$subscriptionId" --query "{appId:appId, password:password, tenant:tenant}" -o json)
          echo "Service Principal Created:"
          echo "$sp"
          
          # Extract values using jq (pre-installed on GitHub runners)
          sp_appid=$(echo $sp | jq -r .appId)
          sp_password=$(echo $sp | jq -r .password)
          sp_tenant=$(echo $sp | jq -r .tenant)
          
          echo "::set-output name=sp_appid::$sp_appid"
          echo "::set-output name=sp_password::$sp_password"
          echo "::set-output name=sp_tenant::$sp_tenant"

  terraform_plan:
    needs: create-sp
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ needs.create-sp.outputs.sp_appid }}
      ARM_CLIENT_SECRET: ${{ needs.create-sp.outputs.sp_password }}
      ARM_TENANT_ID: ${{ needs.create-sp.outputs.sp_tenant }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_location: "eastus"
      TF_VAR_oidc_client_id: ${{ secrets.OIDC_CLIENT_ID }}
      TF_VAR_oidc_client_secret: ${{ secrets.OIDC_CLIENT_SECRET }}
      TF_VAR_oidc_metadata_endpoint: ${{ secrets.OIDC_METADATA_ENDPOINT }}
      TF_VAR_oidc_audience: ${{ secrets.OIDC_AUDIENCE }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.3.0"

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Upload Terraform Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan

  terraform_apply:
    needs: terraform_plan
    runs-on: ubuntu-latest
    environment:
      name: production  # Ensure a 'production' environment is created in GitHub with manual approval.
    env:
      ARM_CLIENT_ID: ${{ needs.create-sp.outputs.sp_appid }}
      ARM_CLIENT_SECRET: ${{ needs.create-sp.outputs.sp_password }}
      ARM_TENANT_ID: ${{ needs.create-sp.outputs.sp_tenant }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      TF_VAR_location: "eastus"
      TF_VAR_oidc_client_id: ${{ secrets.OIDC_CLIENT_ID }}
      TF_VAR_oidc_client_secret: ${{ secrets.OIDC_CLIENT_SECRET }}
      TF_VAR_oidc_metadata_endpoint: ${{ secrets.OIDC_METADATA_ENDPOINT }}
      TF_VAR_oidc_audience: ${{ secrets.OIDC_AUDIENCE }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.3.0"

      - name: Download Terraform Plan Artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

  cleanup:
    needs: terraform_apply
    runs-on: ubuntu-latest
    if: always()  # Runs regardless of the outcome of previous jobs.
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to Azure with Bootstrap Credentials for Cleanup
        uses: azure/login@v2
        with:
          creds: ${{ secrets.BOOTSTRAP_AZURE_CREDENTIALS }}

      - name: Delete Service Principal
        run: |
          spAppId=${{ needs.create-sp.outputs.sp_appid }}
          echo "Deleting service principal: $spAppId"
          az ad sp delete --id $spAppId
